# Taken from the Stack docs: https://docs.haskellstack.org/en/stable/GUIDE/#travis-with-caching
# vim: set tabstop=2:softtabstop=2:shiftwidth=2

# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: c

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack

addons:
  apt:
    packages:
      - python-pip

matrix:
  include:

  # Build with the newest GHC and cabal-install. This is an accepted failure,
  # see below.
  - env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
    compiler: ": #GHC HEAD"
    addons: {apt: {packages: [cabal-install-head,ghc-head,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}

  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack ARGS="" OS="Linux"
    compiler: ": #stack default"
    addons: {apt: {packages: [ghc-8.0.1], sources: [hvr-ghc]}}

  # Nightly builds are allowed to fail
  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp,libgmp-dev]}}

  # Build on OS X in addition to Linux
  - env: BUILD=stack ARGS="" OS="OSX"
    compiler: ": #stack default osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly osx"
    os: osx

  allow_failures:
  - env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
  - env: BUILD=stack ARGS="--resolver nightly"

before_install:
# Using compiler above sets CC to an invalid value, so unset it
- unset CC

# Used in release code
- export VERSION=$(git describe --tags --always)

# We want to always allow newer versions of packages when building on GHC HEAD
- CABALARGS=""
- if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

# Download and unpack the stack executable
- export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
- mkdir -p ~/.local/bin
- |
  if [ `uname` = "Darwin" ]
  then
    travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  else
    travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  fi

  # Use the more reliable S3 mirror of Hackage
  mkdir -p $HOME/.cabal
  echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
  echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config

  if [ "$CABALVER" != "1.16" ]
  then
    echo 'jobs: $ncpus' >> $HOME/.cabal/config
  fi

# Get the list of packages from the stack.yaml file
- PACKAGES=$(stack --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@')

# Install powerline, since it's a build dependency
# Need to install into user dir, since the global path has restricted permissions
- pip install --user powerline-status

# Temp hack to debug config file loading
- which powerline || true
- find / -iname config_files

install:
- echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
- if [ -f configure.ac ]; then autoreconf -i; fi
- |
  set -ex
  case "$BUILD" in
    stack)
      stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
      ;;
    cabal)
      cabal --version
      travis_retry cabal update
      cabal install --only-dependencies --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES
      ;;
  esac
  set +ex

script:
- |
  set -ex
  case "$BUILD" in
    stack)
      stack --no-terminal $ARGS build --test --bench --no-run-benchmarks --haddock --no-haddock-deps --no-run-tests
      pip uninstall -y powerline-status
      stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
      ;;
    cabal)
      cabal install --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES

      ORIGDIR=$(pwd)
      for dir in $PACKAGES
      do
        cd $dir
        cabal check || [ "$CABALVER" == "1.16" ]
        cabal sdist
        PKGVER=$(cabal info . | awk '{print $2;exit}')
        SRC_TGZ=$PKGVER.tar.gz
        cd dist
        tar zxfv "$SRC_TGZ"
        cd "$PKGVER"
        cabal configure --enable-tests
        cabal build
        cd $ORIGDIR
      done

      pip uninstall powerline-status

      for dir in $PACKAGES
      do
        cabal test
      done

      ;;
  esac
  set +ex

before_deploy:
  - export TARGET=$(pwd)
  - cd $(dirname $(stack exec which powerline-hs))
  - tar -cJf "$TARGET/powerline-hs-$OS-$VERSION.tar.xz" powerline-hs
  - cd -
  - echo "Publishing release to Github..."
deploy:
  provider: releases
  api_key:
    secure: YvMQQ63EtwePRX2oQwndEhLddipiPNK8xIdcgDwJdWEb6Y+JERi2QgijADT7CXR8GErT8bZ5/6zoBINqDyL4B3FbIsYmDqiWyG02IXxvnQeiMKeCIJGPkSh3K72eJDJ1Kk126gjWh4iV5U5myJwBdE4Otwc8eUMYQrxUeTa4He79k1GKLR0xsBhIEQCx9WMXLju/vLLqGs3sJq8L/oc802mWq0OAOTeL49sWpgQ3n53nEH+EX1G8mWa2dMLdy6Z/AdGx0cbI6Kn24OkbaTkdUiJnlChUAqEXQmHAoxxqVpvXt+uMvOq7wcQg4Ri2IHjRidhbeWVhF5S/upmnTM0XEelNSePkoQdz6ZAsrtyyFt/+dPFtrWS6WMcl5+BaMe4AUSRM8lByLcHxH0YvCbXWPI2MvZVOTc2n8OmzTtNB47NqkebZV4GEDYJbH6IrxRAiT5aZZErxOXUNHjZctnpQSSaLHP17v/AJluQrxpeKZCg7ledQUOxxUpVV4uytD5OwDgqLhFPew7DYRe6qFf31wTM2P7Lo9nxfPSelUvDP5tGKDPqZO9E0je1rwqgv/gazNVS1691tY9Axj3SHdLb9OhyrJVhKuGi2JO5VeMsVy7hpdqx3czYps6cL3O/Q0wYQVd9XHKO1MLXTuf9xeXsR7Qj8YF1QggaqhhQEVJxt5/g=
  file: "powerline-hs-$OS-$VERSION.tar.xz"
  skip_cleanup: true
  on:
    tags: true
    condition: -n $OS

